{"ast":null,"code":"var _jsxFileName = \"/app/src/context/FontSizeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// フォントサイズのコンテキストタイプ\n\n// FontSizeProvider の props 型に `children` を追加\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// FontSizeContextの作成\nexport const FontSizeContext = /*#__PURE__*/createContext(undefined);\n\n// `localStorage` を使ってフォントサイズを保存するカスタムフック\nexport const FontSizeProvider = ({\n  children\n}) => {\n  _s();\n  // 初期値はlocalStorageから取得\n  const savedFontSize = localStorage.getItem(\"fontSize\");\n  const initialFontSize = savedFontSize ? parseInt(savedFontSize) : 16; // デフォルトは16px\n\n  const [fontSize, setFontSize] = useState(initialFontSize);\n\n  // フォントサイズが変わるたびにlocalStorageに保存\n  useEffect(() => {\n    localStorage.setItem(\"fontSize\", fontSize.toString());\n  }, [fontSize]);\n  return /*#__PURE__*/_jsxDEV(FontSizeContext.Provider, {\n    value: {\n      fontSize,\n      setFontSize\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n// フォントサイズを取得するカスタムフック\n_s(FontSizeProvider, \"UBU2Bz5C8sHvjmvxevFGOdf+6rU=\");\n_c = FontSizeProvider;\nexport const useFontSize = () => {\n  _s2();\n  const context = useContext(FontSizeContext);\n  if (!context) {\n    throw new Error(\"useFontSize must be used within a FontSizeProvider\");\n  }\n  return context;\n};\n_s2(useFontSize, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FontSizeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","FontSizeContext","undefined","FontSizeProvider","children","_s","savedFontSize","localStorage","getItem","initialFontSize","parseInt","fontSize","setFontSize","setItem","toString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFontSize","_s2","context","Error","$RefreshReg$"],"sources":["/app/src/context/FontSizeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\n// フォントサイズのコンテキストタイプ\ntype FontSizeContextType = {\n    fontSize: number;\n    setFontSize: (size: number) => void;\n};\n\n// FontSizeProvider の props 型に `children` を追加\ntype FontSizeProviderProps = {\n    children: ReactNode;  // `children` を `ReactNode` として定義\n};\n\n// FontSizeContextの作成\nexport const FontSizeContext = createContext<FontSizeContextType | undefined>(undefined);\n\n// `localStorage` を使ってフォントサイズを保存するカスタムフック\nexport const FontSizeProvider: React.FC<FontSizeProviderProps> = ({ children }) => {\n    // 初期値はlocalStorageから取得\n    const savedFontSize = localStorage.getItem(\"fontSize\");\n    const initialFontSize = savedFontSize ? parseInt(savedFontSize) : 16;  // デフォルトは16px\n\n    const [fontSize, setFontSize] = useState<number>(initialFontSize);\n\n    // フォントサイズが変わるたびにlocalStorageに保存\n    useEffect(() => {\n        localStorage.setItem(\"fontSize\", fontSize.toString());\n    }, [fontSize]);\n\n    return (\n        <FontSizeContext.Provider value={{ fontSize, setFontSize }}>\n            {children}\n        </FontSizeContext.Provider>\n    );\n};\n\n// フォントサイズを取得するカスタムフック\nexport const useFontSize = (): FontSizeContextType => {\n    const context = useContext(FontSizeContext);\n    if (!context) {\n        throw new Error(\"useFontSize must be used within a FontSizeProvider\");\n    }\n    return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;;AAExF;;AAMA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA;AACA,OAAO,MAAMC,eAAe,gBAAGN,aAAa,CAAkCO,SAAS,CAAC;;AAExF;AACA,OAAO,MAAMC,gBAAiD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E;EACA,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACtD,MAAMC,eAAe,GAAGH,aAAa,GAAGI,QAAQ,CAACJ,aAAa,CAAC,GAAG,EAAE,CAAC,CAAE;;EAEvE,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAASY,eAAe,CAAC;;EAEjE;EACAX,SAAS,CAAC,MAAM;IACZS,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEF,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAAC;EACzD,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACIX,OAAA,CAACC,eAAe,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEC;IAAY,CAAE;IAAAR,QAAA,EACtDA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;;AAED;AAAAf,EAAA,CAnBaF,gBAAiD;AAAAkB,EAAA,GAAjDlB,gBAAiD;AAoB9D,OAAO,MAAMmB,WAAW,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EAClD,MAAMC,OAAO,GAAG5B,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACuB,OAAO,EAAE;IACV,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACzE;EACA,OAAOD,OAAO;AAClB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}